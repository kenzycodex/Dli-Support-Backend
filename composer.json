{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/laravel",
    "type": "project",
    "description": "DLI Student Support Platform - Complete support system for students, counselors, and administrators.",
    "keywords": ["laravel", "framework", "student-support", "ticketing", "user-management", "email-system"],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "illuminate/auth": "*",
        "illuminate/console": "*",
        "illuminate/filesystem": "*",
        "illuminate/support": "*",
        "laravel/framework": "^12.0",
        "laravel/sanctum": "^4.1",
        "laravel/tinker": "^2.10.1",
        "guzzlehttp/guzzle": "^7.8",
        "symfony/mailer": "^7.0",
        "symfony/mime": "^7.0",
        "league/csv": "^9.15",
        "intervention/image": "^3.7",
        "spatie/laravel-permission": "^6.9",
        "league/flysystem-aws-s3-v3": "^3.28",
        "pusher/pusher-php-server": "^7.2"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/pail": "^1.2.2",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.41",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.6",
        "phpunit/phpunit": "^11.5.3",
        "laravel/telescope": "^5.2",
        "barryvdh/laravel-debugbar": "^3.14",
        "spatie/laravel-ignition": "^2.8"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php artisan migrate --graceful --ansi"
        ],
        "deploy": [
            "echo 'üöÄ Starting production deployment...'",
            "composer install --no-dev --optimize-autoloader --no-interaction",
            "@php artisan storage:link",
            "@php artisan config:cache",
            "@php artisan route:cache",
            "@php artisan view:cache",
            "@php artisan queue:table",
            "@php artisan migrate --force",
            "@php artisan optimize",
            "echo '‚úÖ Production deployment completed! Queue workers will start with supervisor.'"
        ],
        "deploy-with-db": [
            "echo 'üöÄ Starting deployment with database migration...'",
            "composer install --no-dev --optimize-autoloader --no-interaction",
            "@php artisan migrate --force",
            "@php artisan storage:link",
            "@php artisan config:cache",
            "@php artisan route:cache",
            "@php artisan view:cache",
            "@php artisan optimize",
            "echo '‚úÖ Deployment with database completed!'"
        ],
        "deploy-staging": [
            "echo 'üé≠ Starting staging deployment...'",
            "composer install --no-dev --optimize-autoloader --no-interaction",
            "@php artisan migrate:fresh --force",
            "@php artisan queue:table --force",
            "@php artisan db:seed --force",
            "@php artisan storage:link",
            "@php artisan config:cache",
            "@php artisan route:cache",
            "@php artisan view:cache",
            "@php artisan optimize",
            "echo '‚úÖ Staging deployment completed!'"
        ],
        "dev": [
            "echo 'üõ†Ô∏è Starting development environment...'",
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74,#10b981\" \"php artisan serve\" \"php artisan queue:listen --queue=emails,bulk-emails,admin-reports --tries=3\" \"php artisan pail --timeout=0\" \"npm run dev\" \"php artisan schedule:work\" --names=server,queue,logs,vite,scheduler"
        ],
        "dev-simple": [
            "echo 'üõ†Ô∏è Starting simple development server...'",
            "@php artisan serve"
        ],
        "queue-work": [
            "echo 'üìß Starting queue workers for email processing...'",
            "@php artisan queue:work --queue=emails,bulk-emails,admin-reports,password-resets --tries=3 --timeout=300"
        ],
        "test": [
            "echo 'üß™ Running tests...'",
            "@php artisan config:clear --ansi",
            "@php artisan test --parallel"
        ],
        "test-coverage": [
            "echo 'üìä Running tests with coverage...'",
            "@php artisan config:clear --ansi",
            "vendor/bin/phpunit --coverage-html=coverage-report"
        ],
        "seed": [
            "echo 'üå± Seeding database...'",
            "@php artisan db:seed --force"
        ],
        "fresh": [
            "echo 'üîÑ Fresh database setup...'",
            "@php artisan migrate:fresh --force",
            "@php artisan queue:table --force",
            "@php artisan db:seed --force"
        ],
        "setup": [
            "echo '‚öôÔ∏è Setting up application...'",
            "@php artisan key:generate",
            "@php artisan storage:link",
            "@php artisan migrate",
            "@php artisan queue:table",
            "@php artisan db:seed",
            "echo '‚úÖ Application setup completed!'"
        ],
        "test-email": [
            "echo 'üìß Testing email configuration...'",
            "@php artisan tinker --execute=\"Mail::raw('Test email from DLI Support Platform', function(\\$m) { \\$m->to(config('mail.admin_email', 'admin@test.com'))->subject('Email Test'); }); echo 'Email sent successfully!';\"",
            "echo '‚úÖ Email test completed!'"
        ],
        "email-test": [
            "echo 'üìß Testing email configuration...'",
            "@php artisan tinker --execute=\"Mail::raw('Test email from DLI Support Platform', function(\\$m) { \\$m->to(config('mail.admin_email', 'admin@test.com'))->subject('Email Test'); }); echo 'Email sent successfully!';\"",
            "echo '‚úÖ Email test completed!'"
        ],
        "user-test": [
            "echo 'üë§ Testing user creation with email...'",
            "@php artisan tinker --execute=\"\\$user = App\\\\Models\\\\User::factory()->create(['role' => 'student']); App\\\\Jobs\\\\SendWelcomeEmail::dispatch(\\$user, 'TempPass123', true); echo 'User created and welcome email queued!';\"",
            "echo '‚úÖ User creation test completed!'"
        ],
        "check-health": [
            "echo 'üè• Checking application health...'",
            "@php artisan config:show app.name",
            "@php artisan config:show mail.mailer",
            "@php artisan config:show queue.default",
            "@php artisan migrate:status",
            "echo '‚úÖ Health check completed!'"
        ],
        "production-check": [
            "echo 'üîç Running production readiness checks...'",
            "@php artisan config:show app.env",
            "@php artisan config:show app.debug",
            "@php artisan config:show app.send_welcome_emails",
            "@php artisan route:list --path=api/admin/users",
            "echo '‚úÖ Production check completed!'"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}